let fontEnabled = true;

function formatFont(text) {
	const fontMapping = {
		a: "ùêö", b: "ùêõ", c: "ùêú", d: "ùêù", e: "ùêû", f: "ùêü", g: "ùê†", h: "ùê°", i: "ùê¢", j: "ùê£", k: "ùê§", l: "ùê•", m: "ùê¶",
		n: "ùêß", o: "ùê®", p: "ùê©", q: "ùê™", r: "ùê´", s: "ùê¨", t: "ùê≠", u: "ùêÆ", v: "ùêØ", w: "ùê∞", x: "ùê±", y: "ùê≤", z: "ùê≥",
		A: "ùêÄ", B: "ùêÅ", C: "ùêÇ", D: "ùêÉ", E: "ùêÑ", F: "ùêÖ", G: "ùêÜ", H: "ùêá", I: "ùêà", J: "ùêâ", K: "ùêä", L: "ùêã", M: "ùêå",
		N: "ùêç", O: "ùêé", P: "ùêè", Q: "ùêê", R: "ùêë", S: "ùêí", T: "ùêì", U: "ùêî", V: "ùêï", W: "ùêñ", X: "ùêó", Y: "ùêò", Z: "ùêô"
	};

	let formattedText = "";
	for (const char of text) {
		if (fontEnabled && char in fontMapping) {
			formattedText += fontMapping[char];
		} else {
			formattedText += char;
		}
	}

	return formattedText;
}

const os = require('os');
const fs = require('fs').promises;
const pidusage = require('pidusage');

async function getStartTimestamp() {
	try {
		const startTimeStr = await fs.readFile('time.txt', 'utf8');
		return parseInt(startTimeStr);
	} catch (error) {
		return Date.now();
	}
}

async function saveStartTimestamp(timestamp) {
	try {
		await fs.writeFile('time.txt', timestamp.toString());
	} catch (error) {
		console.error('Error saving start timestamp:', error);
	}
}

function byte2mb(bytes) {
	const units = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
	let l = 0, n = parseInt(bytes, 10) || 0;
	while (n >= 1024 && ++l) n = n / 1024;
	return `${n.toFixed(n < 10 && l > 0 ? 1 : 0)} ${units[l]}`;
}

function getUptime(uptime) {
	const days = Math.floor(uptime / (3600 * 24));
	const hours = Math.floor((uptime % (3600 * 24)) / 3600);
	const mins = Math.floor((uptime % 3600) / 60);
	const seconds = Math.floor(uptime % 60);
	const months = Math.floor(days / 30);
	const remainingDays = days % 30;

	return `Uptime: ${months} month(s), ${remainingDays} day(s), ${hours} hour(s), ${mins} minute(s), and ${seconds} second(s)`;
}

function getDiskSpace() {
	const disk = os.freemem(); // Available disk space (RAM)
	const totalDisk = os.totalmem(); // Total disk space (RAM)
	return {
		free: byte2mb(disk),
		total: byte2mb(totalDisk)
	};
}

async function onStart({ api, event }) {
	const startTime = await getStartTimestamp();
	const uptimeSeconds = Math.floor((Date.now() - startTime) / 1000);

	const usage = await pidusage(process.pid);
	const osInfo = {
		platform: os.platform(),
		architecture: os.arch()
	};

	const timeStart = Date.now();
	const uptimeMessage = getUptime(uptimeSeconds);
	const uid = "100057041031881";
	const diskSpace = getDiskSpace();

	const returnResult = `
BOT has been working for ${uptimeMessage}
‚ùñ CPU Usage: ${usage.cpu.toFixed(1)}%
‚ùñ RAM Usage: ${byte2mb(usage.memory)}
‚ùñ Cores: ${os.cpus().length}
‚ùñ Ping: ${Date.now() - timeStart}ms
‚ùñ OS Platform: ${osInfo.platform}
‚ùñ System Architecture: ${osInfo.architecture}
‚ùñ Free Disk Space: ${diskSpace.free}
‚ùñ Total Disk Space: ${diskSpace.total}`;

	await saveStartTimestamp(startTime);
	return api.shareContact(formatFont(returnResult), uid, event.threadID);
}

module.exports = {
	config: {
		name: 'uptime',
		version: '2.2.0',
		author: "Solayman", // Do not change credits
		countDown: 5,
		role: 0,
		shortDescription: 'Shows uptime and system details',
		longDescription: {
			en: ''
		},
		category: 'tools',
		guide: {
			en: '{p}uptime'
		}
	},
	byte2mb,
	getStartTimestamp,
	saveStartTimestamp,
	getUptime,
	getDiskSpace,
	onStart
};
